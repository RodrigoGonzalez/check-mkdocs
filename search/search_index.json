{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to Check MkDocs","text":"<p>This is a simple .pre-commit-config.yaml hook to check if MkDocs is configured correctly.</p>"},{"location":"#features","title":"Features","text":"<ul> <li>Validates the MkDocs configuration file (default is <code>mkdocs.yml</code>).</li> <li>Builds the MkDocs project documentation via <code>mkdocs build</code>.</li> <li>Checks the built documentation via <code>mkdocs serve</code>.</li> <li>Can be used as a pre-commit hook.</li> <li>Optionally, it can generate a build of the MkDocs documentation.</li> </ul>"},{"location":"#installation-via-pip","title":"Installation via Pip","text":"<p>You can install this tool via pip:</p> <pre><code>pip install check-mkdocs\n</code></pre>"},{"location":"#local-installation","title":"Local Installation","text":"<p>This tool is packaged with Poetry. To install it, you can clone the repository and use Poetry to install the dependencies:</p> <pre><code>git clone https://github.com/RodrigoGonzalez/check-mkdocs.git\ncd check-mkdocs\npoetry install\n</code></pre>"},{"location":"#pre-commit-usage","title":"Pre-Commit Usage","text":"<p>Add this to your <code>.pre-commit-config.yaml</code>, where <code>mkdocs.yml</code> is the name of your MkDocs YAML configuration file:</p> <pre><code>repos:\n    - repo: https://github.com/RodrigoGonzalez/check-mkdocs\n      rev: v1.1.4\n      hooks:\n        - id: check-mkdocs\n          name: check-mkdocs\n          args: [--config=mkdocs.yml]  # Optional, mkdocs.yml is the default\n</code></pre>"},{"location":"#command-line-usage","title":"Command-Line Usage","text":"<p>To run this hook, you can use the following command:</p> <pre><code>check-mkdocs --config=mkdocs.yml\n</code></pre> <p>This works as well:</p> <pre><code>check-mkdocs mkdocs.yml\n</code></pre> <p>And if <code>mkdocs.yml</code> is the name of your MkDocs YAML configuration file, this works too:</p> <pre><code>check-mkdocs\n</code></pre> <p>These commands will validate the MkDocs configuration file, build the project documentation, and start the server. If there's an error in any of these steps, the tool will print an error message and return an error code.</p>"},{"location":"#the-generate-build-argument","title":"The <code>--generate-build</code> Argument","text":"<p>The <code>--generate-build</code> argument is a command-line flag that you can use to instruct the check_mkdocs tool to generate a build of the MkDocs documentation. This argument is optional, and its default value is False, which means that by default, the tool will not generate a build.</p> <p>When you provide this argument, the tool will call the build function from mkdocs.commands.build with the loaded configuration. This function will build the project documentation and place the built documentation in the <code>site_dir</code> directory specified in the configuration. If the <code>site_dir</code> directory is not specified in the configuration, the tool will use the MkDocs default location as the <code>site_dir</code> (i.e., <code>site/</code>).</p> <p>Here's how you can use this argument:</p> <pre><code>check-mkdocs --config=mkdocs.yml --generate-build\n</code></pre> <p>This command will validate the MkDocs configuration file, build the project documentation, and start the server. If there's an error in any of these steps, the tool will print an error message and return an error code.</p>"},{"location":"#check_mkdocs.main","title":"<code>main(argv: None = None) -&gt; int</code>","text":"<p>The main function is the entry point of the program.</p>"},{"location":"#check_mkdocs.main--parameters","title":"Parameters","text":"None, optional <p>An optional argument representing the command-line arguments. Defaults to None if not provided.</p>"},{"location":"#check_mkdocs.main--returns","title":"Returns","text":"<p>int     The return value of the function, which is an integer.</p>"},{"location":"#check_mkdocs.main--raises","title":"Raises","text":"<p>FileNotFoundError     If the specified config file does not exist.</p>"},{"location":"#check_mkdocs.main--description","title":"Description","text":"<p>The main function creates an argument parser object using the <code>argparse.ArgumentParser()</code> class. It adds a positional argument <code>config</code> to the parser, which represents the path to the configuration file. The <code>nargs='?'</code> option specifies that the argument is optional and can be omitted.</p> <p>The <code>default='mkdocs.yml'</code> option specifies the default value of the argument if it is not provided.</p> <p>Additionally, it adds a keyword argument <code>--config</code> to the parser. This argument also represents the path to the configuration file. If both the positional and keyword arguments are provided, the keyword argument will take precedence.</p> <p>Another argument <code>--generate-build</code> is added to the parser. This argument is a flag to generate a build of the documentation. The default value is False.</p> <p>The function parses the command-line arguments using the <code>parser.parse_args(argv)</code> method, which returns an object containing the parsed arguments.</p> <p>The function retrieves the value of the <code>config</code> argument from the parsed arguments.</p> <p>If the specified config file does not exist, the function raises a <code>FileNotFoundError</code> with a descriptive error message.</p> <p>The function then attempts to open the config file in read mode using the <code>open(config_file, 'r')</code> function. If successful, it reads the contents of the file and loads them as a YAML object using the <code>yaml.safe_load(f)</code> function.</p> <p>The function checks if the 'site_name' key is present in the loaded YAML. If not, it prints an error message.</p> <p>The function then loads the configuration using the <code>load_config(config_file=config_file)</code> function. If there is an error in the configuration file, it prints an error message.</p> <p>The function then attempts to build the documentation using the <code>build(config)</code> function. If there is an error during the build process, it returns a user-friendly error message.</p> <p>The function then attempts to start the server using the <code>serve(config_file=config_file)</code> function. If there is an error during the server start process, it returns a user-friendly error message.</p> <p>Finally, the function returns 0 if all the above processes are successful.</p> Source code in <code>src/check_mkdocs/check_mkdocs.py</code> <pre><code>def main(argv: None = None) -&gt; int:\n\"\"\"\n    The main function is the entry point of the program.\n\n    Parameters\n    ----------\n    argv : None, optional\n        An optional argument representing the command-line arguments. Defaults\n        to None if not provided.\n\n    Returns\n    -------\n    int\n        The return value of the function, which is an integer.\n\n    Raises\n    ------\n    FileNotFoundError\n        If the specified config file does not exist.\n\n    Description\n    -----------\n    The main function creates an argument parser object using the\n    `argparse.ArgumentParser()` class. It adds a positional argument\n    `config` to the parser, which represents the path to the\n    configuration file. The `nargs='?'` option specifies that the argument is\n    optional and can be omitted.\n\n    The `default='mkdocs.yml'` option specifies the default value of the\n    argument if it is not provided.\n\n    Additionally, it adds a keyword argument `--config` to the parser. This\n    argument also represents the path to the configuration file. If both the\n    positional and keyword arguments are provided, the keyword argument will\n    take precedence.\n\n    Another argument `--generate-build` is added to the parser. This argument\n    is a flag to generate a build of the documentation. The default value is False.\n\n    The function parses the command-line arguments using the\n    `parser.parse_args(argv)` method, which returns an object containing the\n    parsed arguments.\n\n    The function retrieves the value of the `config` argument from the\n    parsed arguments.\n\n    If the specified config file does not exist, the function raises a\n    `FileNotFoundError` with a descriptive error message.\n\n    The function then attempts to open the config file in read mode using the\n    `open(config_file, 'r')` function. If successful, it reads the contents of\n    the file and loads them as a YAML object using the `yaml.safe_load(f)`\n    function.\n\n    The function checks if the 'site_name' key is present in the loaded YAML.\n    If not, it prints an error message.\n\n    The function then loads the configuration using the\n    `load_config(config_file=config_file)` function. If there is an error in\n    the configuration file, it prints an error message.\n\n    The function then attempts to build the documentation using the\n    `build(config)` function. If there is an error during the build process,\n    it returns a user-friendly error message.\n\n    The function then attempts to start the server using the\n    `serve(config_file=config_file)` function. If there is an error during the\n    server start process, it returns a user-friendly error message.\n\n    Finally, the function returns 0 if all the above processes are successful.\n    \"\"\"\n    parser = argparse.ArgumentParser()\n    parser.add_argument(\n        \"config\",\n        nargs=\"?\",\n        default=\"mkdocs.yml\",\n        help=\"Path to the configuration file. Default is 'mkdocs.yml'\",\n    )\n    parser.add_argument(\n        \"--config\",\n        dest=\"config_opt\",\n        help=(\n            \"Path to the configuration file. Overrides the positional 'config' \"\n            \"argument if provided.\"\n        ),\n    )\n    parser.add_argument(\n        \"--generate-build\",\n        dest=\"generate_build\",\n        action=\"store_true\",\n        default=False,\n        help=\"Flag to generate a build of the documentation in your project. Default is False.\",\n    )\n    args = parser.parse_args(argv)\n\n    config_file = args.config_opt or args.config\n\n    if not os.path.exists(config_file):\n        raise FileNotFoundError(\n            f\"Config file '{config_file}' not found. Please specify a \" f\"config file.\"\n        )\n\n    # Load the YAML to check initial errors\n    try:\n        with open(config_file, \"r\") as f:\n            config = yaml.safe_load(f)\n        # Check if 'site_name' key is present in the loaded YAML\n        if \"site_name\" not in config:\n            print(\n                f\"{config_file}: Missing site_name field. This is a required \"\n                f\"field. See: https://www.mkdocs.org/user-guide/configuration/\"\n            )\n\n    except Exception as e:\n        return _generate_user_friendly_error_message(config_file, \"Error loading YAML\", e)\n\n    # Load the configuration\n    try:\n        config = load_config(config_file=config_file)\n    except ConfigurationError as e:\n        print(f\"Error in configuration file: {e}\")\n        return _generate_user_friendly_error_message(config_file, \"Error in configuration file\", e)\n\n    # Build the documentation\n    try:\n        print(\"Building the documentation...\")\n        if args.generate_build:\n            subprocess.run([\"mkdocs\", \"build\", \"--config-file\", config_file], check=True)\n        else:\n            with tempfile.TemporaryDirectory() as temp_dir:\n                subprocess.run(\n                    [\"mkdocs\", \"build\", \"--config-file\", config_file, \"--site-dir\", temp_dir],\n                    check=True,\n                )\n    except Exception as e:\n        return _generate_user_friendly_error_message(\n            config_file, \"Error building the documentation\", e\n        )\n\n    print(\"Trying to start the server...\")\n    # Start the server\n    try:\n        server_process = subprocess.Popen(\n            [\"mkdocs\", \"serve\", \"--config-file\", config_file, \"--no-livereload\", \"--dirty\"]\n        )\n        time.sleep(5)  # wait for 5 seconds to let the server start\n        print(\"Shutting down...\")\n        server_process.terminate()\n        server_process.wait()\n    except Exception as e:\n        return _generate_user_friendly_error_message(config_file, \"Error starting the server\", e)\n\n    return 0\n</code></pre>"},{"location":"changelog/","title":"Changelog","text":"<p>--8&lt;-- \"CHANGELOG.md\"</p>"}]}